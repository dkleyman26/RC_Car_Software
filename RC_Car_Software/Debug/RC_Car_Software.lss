
RC_Car_Software.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000052  00800060  000003a8  0000043c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  008000b2  008000b2  0000048e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000048e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001c8  00000000  00000000  000004be  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001148  00000000  00000000  00000686  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000809  00000000  00000000  000017ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000099d  00000000  00000000  00001fd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003b8  00000000  00000000  00002974  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000513  00000000  00000000  00002d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000079a  00000000  00000000  0000323f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000170  00000000  00000000  000039d9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c1       	rjmp	.+562    	; 0x236 <__vector_1>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	1f c1       	rjmp	.+574    	; 0x252 <__vector_9>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	b9 c0       	rjmp	.+370    	; 0x190 <__vector_14>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e8 ea       	ldi	r30, 0xA8	; 168
  3a:	f3 e0       	ldi	r31, 0x03	; 3
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a2 3b       	cpi	r26, 0xB2	; 178
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a2 eb       	ldi	r26, 0xB2	; 178
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	aa 3b       	cpi	r26, 0xBA	; 186
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	5a d1       	rcall	.+692    	; 0x30e <main>
  5a:	a4 c1       	rjmp	.+840    	; 0x3a4 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <ADC_Init>:
#include <avr/io.h>
#include "../Headers/DEFINES.h"
#include "../Headers/ADC.h"

void ADC_Init() {
	ADMUX |= (1 << ADLAR); // left adjust adc result to get 8 bit precision from 10 bit output
  5e:	3d 9a       	sbi	0x07, 5	; 7
	
	// enable adc, start conversion, enable interrupt, set prescaler to 64
	ADCSRA |= (1 << ADEN) | (1 << ADSC) | (1 << ADIE) | (1 << ADPS2) | (1 << ADPS1);
  60:	86 b1       	in	r24, 0x06	; 6
  62:	8e 6c       	ori	r24, 0xCE	; 206
  64:	86 b9       	out	0x06, r24	; 6
  66:	08 95       	ret

00000068 <ReadADC>:
}

uint8_t ReadADC(){
	return ADCH;
  68:	85 b1       	in	r24, 0x05	; 5
}
  6a:	08 95       	ret

0000006c <EEPROM_write>:
	EEAR = address; // set up address register
	EECR |= (1 << EERE); // start eeprom read by setting EEWE
	return EEDR; // return data from data register
}

void EEPROM_write(ui16 address, ui8 data, ui8 CHIP_SELECT) {
  6c:	0f 93       	push	r16
  6e:	1f 93       	push	r17
  70:	cf 93       	push	r28
  72:	df 93       	push	r29
  74:	18 2f       	mov	r17, r24
  76:	09 2f       	mov	r16, r25
  78:	d6 2f       	mov	r29, r22
  7a:	c4 2f       	mov	r28, r20
	ui8 addressHigh =	((address & 0xFF00) >> 8); // upper 8 address bits
	ui8 addressLow =	(address & 0x00FF); // lower 8 address bits
	
	TWI_Start(); // start TWI transmission
  7c:	36 d0       	rcall	.+108    	; 0xea <TWI_Start>
	TWI_Write(CHIP_SELECT); // send SLA_W to eeprom selected chip
  7e:	8c 2f       	mov	r24, r28
  80:	3d d0       	rcall	.+122    	; 0xfc <TWI_Write>
	while(TWI_Status() != SLA_W_ACK) { // check if SLA_W and ack received
  82:	06 c0       	rjmp	.+12     	; 0x90 <EEPROM_write+0x24>
		TWI_Start(); // resend start again
  84:	32 d0       	rcall	.+100    	; 0xea <TWI_Start>
		while (TWI_Status() != REPEATED_START); // verify restart
  86:	41 d0       	rcall	.+130    	; 0x10a <TWI_Status>
  88:	80 31       	cpi	r24, 0x10	; 16
  8a:	e9 f7       	brne	.-6      	; 0x86 <EEPROM_write+0x1a>
		TWI_Write(CHIP_SELECT); // resend SLA_W to eeprom selected chip
  8c:	8c 2f       	mov	r24, r28
  8e:	36 d0       	rcall	.+108    	; 0xfc <TWI_Write>
	ui8 addressHigh =	((address & 0xFF00) >> 8); // upper 8 address bits
	ui8 addressLow =	(address & 0x00FF); // lower 8 address bits
	
	TWI_Start(); // start TWI transmission
	TWI_Write(CHIP_SELECT); // send SLA_W to eeprom selected chip
	while(TWI_Status() != SLA_W_ACK) { // check if SLA_W and ack received
  90:	3c d0       	rcall	.+120    	; 0x10a <TWI_Status>
  92:	88 31       	cpi	r24, 0x18	; 24
  94:	b9 f7       	brne	.-18     	; 0x84 <EEPROM_write+0x18>
		TWI_Start(); // resend start again
		while (TWI_Status() != REPEATED_START); // verify restart
		TWI_Write(CHIP_SELECT); // resend SLA_W to eeprom selected chip
	}
	
	TWI_Write(addressHigh); // write MSB address
  96:	80 2f       	mov	r24, r16
  98:	31 d0       	rcall	.+98     	; 0xfc <TWI_Write>
	while (TWI_Status() != DATA_ACK); // wait for ack
  9a:	37 d0       	rcall	.+110    	; 0x10a <TWI_Status>
  9c:	88 32       	cpi	r24, 0x28	; 40
  9e:	e9 f7       	brne	.-6      	; 0x9a <EEPROM_write+0x2e>
	TWI_Write(addressLow);	// write LSB address
  a0:	81 2f       	mov	r24, r17
  a2:	2c d0       	rcall	.+88     	; 0xfc <TWI_Write>
	while (TWI_Status() != DATA_ACK); // wait for ack
  a4:	32 d0       	rcall	.+100    	; 0x10a <TWI_Status>
  a6:	88 32       	cpi	r24, 0x28	; 40
  a8:	e9 f7       	brne	.-6      	; 0xa4 <EEPROM_write+0x38>
	
	TWI_Write(data); // write data
  aa:	8d 2f       	mov	r24, r29
  ac:	27 d0       	rcall	.+78     	; 0xfc <TWI_Write>
	while (TWI_Status() != DATA_ACK); // wait for ack
  ae:	2d d0       	rcall	.+90     	; 0x10a <TWI_Status>
  b0:	88 32       	cpi	r24, 0x28	; 40
  b2:	e9 f7       	brne	.-6      	; 0xae <EEPROM_write+0x42>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b4:	87 ec       	ldi	r24, 0xC7	; 199
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <EEPROM_write+0x4c>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <EEPROM_write+0x52>
  be:	00 00       	nop
	_delay_us(100);
	TWI_Stop(); // send stop condition
  c0:	1a d0       	rcall	.+52     	; 0xf6 <TWI_Stop>
}
  c2:	df 91       	pop	r29
  c4:	cf 91       	pop	r28
  c6:	1f 91       	pop	r17
  c8:	0f 91       	pop	r16
  ca:	08 95       	ret

000000cc <CPE_RELAY_Init>:
#include "../Headers/DEFINES.h"
#include "../Headers/EE_INTEGRATION.h"
#include <util/delay.h>

void CPE_RELAY_Init() {
	DDRB |= (1 << RELAY_PIN); // enable cpe relay pin
  cc:	ba 9a       	sbi	0x17, 2	; 23
  ce:	08 95       	ret

000000d0 <Phase_Corrected_PWM_Init>:
#include <avr/io.h>
#include "../Headers/DEFINES.h"
#include "../Headers/PID_CONTROLLER.h"

void Phase_Corrected_PWM_Init() {
	DDRB |= (1 << DDB1);					// set PB1 to be PWM output
  d0:	b9 9a       	sbi	0x17, 1	; 23
	TCCR1A = (1 << WGM10) | (1 << COM1A1);	// set phase corrected PWM and non inverting mode
  d2:	81 e8       	ldi	r24, 0x81	; 129
  d4:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= NO_PRESCALE;					// no prescaler
  d6:	8e b5       	in	r24, 0x2e	; 46
  d8:	81 60       	ori	r24, 0x01	; 1
  da:	8e bd       	out	0x2e, r24	; 46
	OCR1A = 63;								// 25% duty cycle			
  dc:	8f e3       	ldi	r24, 0x3F	; 63
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	9b bd       	out	0x2b, r25	; 43
  e2:	8a bd       	out	0x2a, r24	; 42
  e4:	08 95       	ret

000000e6 <TWI_Init>:
#include "../Headers/TWI.h"
#include "../Headers/USART.h"
#include <util/delay.h>

void TWI_Init() {
	TWBR |= 0x08; // 8 -> bit rate register (TWBR)
  e6:	03 9a       	sbi	0x00, 3	; 0
  e8:	08 95       	ret

000000ea <TWI_Start>:
	// default at 1 -> bit rate prescaler (TWPS)
	// TWSR |= (1 << TWPS1) | (1 << TWPS0); 
}

void TWI_Start() {
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN); // send start condition
  ea:	84 ea       	ldi	r24, 0xA4	; 164
  ec:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1 << TWINT))); // wait for interrupt to be set
  ee:	06 b6       	in	r0, 0x36	; 54
  f0:	07 fe       	sbrs	r0, 7
  f2:	fd cf       	rjmp	.-6      	; 0xee <TWI_Start+0x4>
}
  f4:	08 95       	ret

000000f6 <TWI_Stop>:

void TWI_Stop() {
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN); // send stop condition
  f6:	84 e9       	ldi	r24, 0x94	; 148
  f8:	86 bf       	out	0x36, r24	; 54
  fa:	08 95       	ret

000000fc <TWI_Write>:
}

void TWI_Write(uint8_t data) {
	TWDR = data; // sets data register to "data"
  fc:	83 b9       	out	0x03, r24	; 3
	TWCR = (1 << TWINT) | (1 << TWEN); // reset interrupt and re-enable
  fe:	84 e8       	ldi	r24, 0x84	; 132
 100:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1 << TWINT))); // wait for interrupt to be set
 102:	06 b6       	in	r0, 0x36	; 54
 104:	07 fe       	sbrs	r0, 7
 106:	fd cf       	rjmp	.-6      	; 0x102 <TWI_Write+0x6>
}
 108:	08 95       	ret

0000010a <TWI_Status>:

uint8_t TWI_Status() {
	return (TWSR & 0xF8); // return status register masked lower 3 bits
 10a:	81 b1       	in	r24, 0x01	; 1
}
 10c:	88 7f       	andi	r24, 0xF8	; 248
 10e:	08 95       	ret

00000110 <hex2ascii>:
#include <avr/io.h>
#include "../Headers/DEFINES.h"
#include "../Headers/USART.h"

void hex2ascii(unsigned char hexval, unsigned char *c1, unsigned char *c2) {
	(*c1) = asctab[(hexval>>4)&0x0F];
 110:	a8 2f       	mov	r26, r24
 112:	a2 95       	swap	r26
 114:	af 70       	andi	r26, 0x0F	; 15
 116:	b0 e0       	ldi	r27, 0x00	; 0
 118:	ac 59       	subi	r26, 0x9C	; 156
 11a:	bf 4f       	sbci	r27, 0xFF	; 255
 11c:	9c 91       	ld	r25, X
 11e:	fb 01       	movw	r30, r22
 120:	90 83       	st	Z, r25
	(*c2) = asctab[(hexval)&0x0F];
 122:	8f 70       	andi	r24, 0x0F	; 15
 124:	e8 2f       	mov	r30, r24
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	ec 59       	subi	r30, 0x9C	; 156
 12a:	ff 4f       	sbci	r31, 0xFF	; 255
 12c:	80 81       	ld	r24, Z
 12e:	fa 01       	movw	r30, r20
 130:	80 83       	st	Z, r24
 132:	08 95       	ret

00000134 <PutC>:
	}
	return temp;
}

void PutC(UC data) {
	while (!(UCSRA & (1 << UDRE))) // busy wait for empty transmit buffer
 134:	5d 9b       	sbis	0x0b, 5	; 11
 136:	fe cf       	rjmp	.-4      	; 0x134 <PutC>
	;
	UDR = data; // put data into buffer and send it
 138:	8c b9       	out	0x0c, r24	; 12
 13a:	08 95       	ret

0000013c <PutS>:
	UC ch = GetC(); 
	PutC(ch);
	return ch;
}

void PutS(char *msg) {
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
 140:	ec 01       	movw	r28, r24
	int k = 0;
	char ch;
	while (msg[k] != 0) {
 142:	88 81       	ld	r24, Y
 144:	88 23       	and	r24, r24
 146:	29 f0       	breq	.+10     	; 0x152 <PutS+0x16>
 148:	21 96       	adiw	r28, 0x01	; 1
		ch = msg[k];
		k = k + 1;
		PutC(ch);
 14a:	f4 df       	rcall	.-24     	; 0x134 <PutC>
}

void PutS(char *msg) {
	int k = 0;
	char ch;
	while (msg[k] != 0) {
 14c:	89 91       	ld	r24, Y+
 14e:	81 11       	cpse	r24, r1
 150:	fc cf       	rjmp	.-8      	; 0x14a <PutS+0xe>
		ch = msg[k];
		k = k + 1;
		PutC(ch);
	}
}
 152:	df 91       	pop	r29
 154:	cf 91       	pop	r28
 156:	08 95       	ret

00000158 <USART_Init>:

void USART_Init(UI baud) {
	// set baud rate
	UBRRH = (UC)((baud & 0xFF00) >> 8);
 158:	90 bd       	out	0x20, r25	; 32
	UBRRL = (UC)((baud & 0x00FF));
 15a:	89 b9       	out	0x09, r24	; 9
	
	//enable receiver and transmitter
	UCSRB = (1 << RXEN) | (1 << TXEN);
 15c:	88 e1       	ldi	r24, 0x18	; 24
 15e:	8a b9       	out	0x0a, r24	; 10
	
	// set format to 8 bits 2 stop bits
	UCSRC = (1<<URSEL)|(1<<USBS)|(3<<UCSZ0);
 160:	8e e8       	ldi	r24, 0x8E	; 142
 162:	80 bd       	out	0x20, r24	; 32
 164:	08 95       	ret

00000166 <HEX_USART>:
}

void HEX_USART(UC data) {
 166:	cf 93       	push	r28
 168:	df 93       	push	r29
 16a:	00 d0       	rcall	.+0      	; 0x16c <HEX_USART+0x6>
 16c:	cd b7       	in	r28, 0x3d	; 61
 16e:	de b7       	in	r29, 0x3e	; 62
	char c1, c2;
	hex2ascii(data, &c1, &c2);
 170:	ae 01       	movw	r20, r28
 172:	4e 5f       	subi	r20, 0xFE	; 254
 174:	5f 4f       	sbci	r21, 0xFF	; 255
 176:	be 01       	movw	r22, r28
 178:	6f 5f       	subi	r22, 0xFF	; 255
 17a:	7f 4f       	sbci	r23, 0xFF	; 255
 17c:	c9 df       	rcall	.-110    	; 0x110 <hex2ascii>
	PutC(c1);
 17e:	89 81       	ldd	r24, Y+1	; 0x01
 180:	d9 df       	rcall	.-78     	; 0x134 <PutC>
	PutC(c2);
 182:	8a 81       	ldd	r24, Y+2	; 0x02
 184:	d7 df       	rcall	.-82     	; 0x134 <PutC>
}
 186:	0f 90       	pop	r0
 188:	0f 90       	pop	r0
 18a:	df 91       	pop	r29
 18c:	cf 91       	pop	r28
 18e:	08 95       	ret

00000190 <__vector_14>:
int TWI_MEMORY_LOCATION = 0; // twi memory location from 0 -> 16000 (64 kbits of EEPROM * 2)
int ALLOW_TWI_WRITE = 0; // determines if TWI should be written after 2 values are read
enum Mode OPERATION_MODE = IDLE; // determine operation mode of the car


ISR(ADC_vect) {
 190:	1f 92       	push	r1
 192:	0f 92       	push	r0
 194:	0f b6       	in	r0, 0x3f	; 63
 196:	0f 92       	push	r0
 198:	11 24       	eor	r1, r1
 19a:	2f 93       	push	r18
 19c:	3f 93       	push	r19
 19e:	4f 93       	push	r20
 1a0:	5f 93       	push	r21
 1a2:	6f 93       	push	r22
 1a4:	7f 93       	push	r23
 1a6:	8f 93       	push	r24
 1a8:	9f 93       	push	r25
 1aa:	af 93       	push	r26
 1ac:	bf 93       	push	r27
 1ae:	ef 93       	push	r30
 1b0:	ff 93       	push	r31
	static int ADC_SELECT = 0; // choose between ADC0 and ADC1
	ADMUX = ADMUX & 0b11110000; // mask bits in order to switch channels
 1b2:	87 b1       	in	r24, 0x07	; 7
 1b4:	80 7f       	andi	r24, 0xF0	; 240
 1b6:	87 b9       	out	0x07, r24	; 7
	
	if (OPERATION_MODE == CPE_PID) {
 1b8:	80 91 60 00 	lds	r24, 0x0060
 1bc:	83 30       	cpi	r24, 0x03	; 3
 1be:	29 f4       	brne	.+10     	; 0x1ca <__vector_14+0x3a>
		ADMUX |= (1 << MUX1); // set channel to ADC2 to read potentiometer output
 1c0:	39 9a       	sbi	0x07, 1	; 7
		ADC_VALUE_2 = ReadADC(); 
 1c2:	52 df       	rcall	.-348    	; 0x68 <ReadADC>
 1c4:	80 93 61 00 	sts	0x0061, r24
 1c8:	25 c0       	rjmp	.+74     	; 0x214 <__vector_14+0x84>
	} else if (OPERATION_MODE == EE_PID) {
 1ca:	82 30       	cpi	r24, 0x02	; 2
 1cc:	19 f5       	brne	.+70     	; 0x214 <__vector_14+0x84>
		switch(ADC_SELECT) {
 1ce:	80 91 b2 00 	lds	r24, 0x00B2
 1d2:	90 91 b3 00 	lds	r25, 0x00B3
 1d6:	89 2b       	or	r24, r25
 1d8:	81 f4       	brne	.+32     	; 0x1fa <__vector_14+0x6a>
			case 0: // current channel is ADC0
				ADC_VALUE_0 = ReadADC();
 1da:	46 df       	rcall	.-372    	; 0x68 <ReadADC>
 1dc:	80 93 63 00 	sts	0x0063, r24
				ADC_SELECT = 1; // switch channel to ADC1
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	90 93 b3 00 	sts	0x00B3, r25
 1e8:	80 93 b2 00 	sts	0x00B2, r24
				ADMUX |= (1 << MUX0); // set MUX0 bit to select ADC1
 1ec:	38 9a       	sbi	0x07, 0	; 7
				ALLOW_TWI_WRITE = 0; // do not allow twi to transmit as both channels are not sampled
 1ee:	10 92 b5 00 	sts	0x00B5, r1
 1f2:	10 92 b4 00 	sts	0x00B4, r1
				ADCSRA |= (1 << ADSC); // start next conversion
 1f6:	36 9a       	sbi	0x06, 6	; 6
				break;
 1f8:	0d c0       	rjmp	.+26     	; 0x214 <__vector_14+0x84>
			default: // current channel is ADC1
				ADC_VALUE_1 = ReadADC();
 1fa:	36 df       	rcall	.-404    	; 0x68 <ReadADC>
 1fc:	80 93 62 00 	sts	0x0062, r24
				ADC_SELECT = 0; // switch back to channel ADC0
 200:	10 92 b3 00 	sts	0x00B3, r1
 204:	10 92 b2 00 	sts	0x00B2, r1
				ALLOW_TWI_WRITE = 1; // allow twi to transmit as both channels ARE sampled
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	90 93 b5 00 	sts	0x00B5, r25
 210:	80 93 b4 00 	sts	0x00B4, r24
		//// DO NOT START NEXT CONVERSION
		//BYTE_COUNT = 0;
	//}
	/* -------------------------------------- */
    
}
 214:	ff 91       	pop	r31
 216:	ef 91       	pop	r30
 218:	bf 91       	pop	r27
 21a:	af 91       	pop	r26
 21c:	9f 91       	pop	r25
 21e:	8f 91       	pop	r24
 220:	7f 91       	pop	r23
 222:	6f 91       	pop	r22
 224:	5f 91       	pop	r21
 226:	4f 91       	pop	r20
 228:	3f 91       	pop	r19
 22a:	2f 91       	pop	r18
 22c:	0f 90       	pop	r0
 22e:	0f be       	out	0x3f, r0	; 63
 230:	0f 90       	pop	r0
 232:	1f 90       	pop	r1
 234:	18 95       	reti

00000236 <__vector_1>:

ISR(INT0_vect) {
 236:	1f 92       	push	r1
 238:	0f 92       	push	r0
 23a:	0f b6       	in	r0, 0x3f	; 63
 23c:	0f 92       	push	r0
 23e:	11 24       	eor	r1, r1
		//PORTB = ~PORTB; // toggle led when done
	//}
	/* -------------------------------------- */

	//HEX_USART(OVERFLOW_COUNT); // transmit overflow count in hex
	OVERFLOW_COUNT = 0; // reset overflow counter for timer
 240:	10 92 b9 00 	sts	0x00B9, r1
 244:	10 92 b8 00 	sts	0x00B8, r1
}
 248:	0f 90       	pop	r0
 24a:	0f be       	out	0x3f, r0	; 63
 24c:	0f 90       	pop	r0
 24e:	1f 90       	pop	r1
 250:	18 95       	reti

00000252 <__vector_9>:

ISR(TIMER0_OVF_vect) {
 252:	1f 92       	push	r1
 254:	0f 92       	push	r0
 256:	0f b6       	in	r0, 0x3f	; 63
 258:	0f 92       	push	r0
 25a:	11 24       	eor	r1, r1
 25c:	8f 93       	push	r24
 25e:	9f 93       	push	r25
	TCNT0 = TIMER0_START; // reset timer start to 150
 260:	86 e9       	ldi	r24, 0x96	; 150
 262:	82 bf       	out	0x32, r24	; 50
	if (OVERFLOW_COUNT <= 254) {
 264:	80 91 b8 00 	lds	r24, 0x00B8
 268:	90 91 b9 00 	lds	r25, 0x00B9
 26c:	8f 3f       	cpi	r24, 0xFF	; 255
 26e:	91 05       	cpc	r25, r1
 270:	34 f4       	brge	.+12     	; 0x27e <__vector_9+0x2c>
		OVERFLOW_COUNT++; // increment overflow count if below 255
 272:	01 96       	adiw	r24, 0x01	; 1
 274:	90 93 b9 00 	sts	0x00B9, r25
 278:	80 93 b8 00 	sts	0x00B8, r24
 27c:	06 c0       	rjmp	.+12     	; 0x28a <__vector_9+0x38>
	} else {
		OVERFLOW_COUNT = OVERFLOW_CLAMP; // clamp overflow count to 0xFE
 27e:	8e ef       	ldi	r24, 0xFE	; 254
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	90 93 b9 00 	sts	0x00B9, r25
 286:	80 93 b8 00 	sts	0x00B8, r24
	}
}
 28a:	9f 91       	pop	r25
 28c:	8f 91       	pop	r24
 28e:	0f 90       	pop	r0
 290:	0f be       	out	0x3f, r0	; 63
 292:	0f 90       	pop	r0
 294:	1f 90       	pop	r1
 296:	18 95       	reti

00000298 <TIMER0_Init>:
	INT0_Init();
	ADC_Init();
}

void TIMER0_Init() {
	TCCR0 |= (1 << CS02); // prescale at 256
 298:	83 b7       	in	r24, 0x33	; 51
 29a:	84 60       	ori	r24, 0x04	; 4
 29c:	83 bf       	out	0x33, r24	; 51
	TCNT0 = TIMER0_START; // timer start value at 150
 29e:	86 e9       	ldi	r24, 0x96	; 150
 2a0:	82 bf       	out	0x32, r24	; 50
	TIMSK |= (1 << TOIE0); // enable timer interrupt
 2a2:	89 b7       	in	r24, 0x39	; 57
 2a4:	81 60       	ori	r24, 0x01	; 1
 2a6:	89 bf       	out	0x39, r24	; 57
 2a8:	08 95       	ret

000002aa <INT0_Init>:
}

void INT0_Init() {
	MCUCR |= (1 << ISC01) | (1 << ISC00); // configure int0 to interrupt on rising edge
 2aa:	85 b7       	in	r24, 0x35	; 53
 2ac:	83 60       	ori	r24, 0x03	; 3
 2ae:	85 bf       	out	0x35, r24	; 53
	GICR |= (1 << INT0); // enable int0
 2b0:	8b b7       	in	r24, 0x3b	; 59
 2b2:	80 64       	ori	r24, 0x40	; 64
 2b4:	8b bf       	out	0x3b, r24	; 59
	GIFR |= (1 << INTF0); // enable int0 interrupt
 2b6:	8a b7       	in	r24, 0x3a	; 58
 2b8:	80 64       	ori	r24, 0x40	; 64
 2ba:	8a bf       	out	0x3a, r24	; 58
 2bc:	08 95       	ret

000002be <ISR_Init>:
		OVERFLOW_COUNT = OVERFLOW_CLAMP; // clamp overflow count to 0xFE
	}
}

void ISR_Init() {
	sei(); // enable global interrupts
 2be:	78 94       	sei
	TIMER0_Init();
 2c0:	eb df       	rcall	.-42     	; 0x298 <TIMER0_Init>
	INT0_Init();
 2c2:	f3 df       	rcall	.-26     	; 0x2aa <INT0_Init>
	ADC_Init();
 2c4:	cc de       	rcall	.-616    	; 0x5e <ADC_Init>
 2c6:	08 95       	ret

000002c8 <Peripherals_Init>:
	GICR |= (1 << INT0); // enable int0
	GIFR |= (1 << INTF0); // enable int0 interrupt
}

void Peripherals_Init() {
	DDRB = (1 << myLED);		// configure LED pin
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	87 bb       	out	0x17, r24	; 23
	LED_OFF;			
 2cc:	c0 9a       	sbi	0x18, 0	; 24
	USART_Init(myBaud);			// init usart
 2ce:	83 e3       	ldi	r24, 0x33	; 51
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	42 df       	rcall	.-380    	; 0x158 <USART_Init>
	TWI_Init();					// init twi
 2d4:	08 df       	rcall	.-496    	; 0xe6 <TWI_Init>
	Phase_Corrected_PWM_Init();	// init PWM
 2d6:	fc de       	rcall	.-520    	; 0xd0 <Phase_Corrected_PWM_Init>
	CPE_RELAY_Init();			// init CPE relay
 2d8:	f9 de       	rcall	.-526    	; 0xcc <CPE_RELAY_Init>
 2da:	08 95       	ret

000002dc <Determine_Operation_Mode>:
		PutC('\n');
	}
}

void Determine_Operation_Mode() {
	if (CPE_SWITCH_DISABLED && EE_SWITCH_DISABLED) {  
 2dc:	87 99       	sbic	0x10, 7	; 16
 2de:	07 c0       	rjmp	.+14     	; 0x2ee <Determine_Operation_Mode+0x12>
 2e0:	86 99       	sbic	0x10, 6	; 16
 2e2:	05 c0       	rjmp	.+10     	; 0x2ee <Determine_Operation_Mode+0x12>
		OPERATION_MODE = IDLE;
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	80 93 60 00 	sts	0x0060, r24
		EE_BOARD_ENABLE_RELAY;
 2ea:	c2 9a       	sbi	0x18, 2	; 24
 2ec:	08 95       	ret
	} else if (CPE_SWITCH_ENABLED) { 
 2ee:	87 9b       	sbis	0x10, 7	; 16
 2f0:	05 c0       	rjmp	.+10     	; 0x2fc <Determine_Operation_Mode+0x20>
		OPERATION_MODE = CPE_PID;
 2f2:	83 e0       	ldi	r24, 0x03	; 3
 2f4:	80 93 60 00 	sts	0x0060, r24
		CPE_BOARD_ENABLE_RELAY;
 2f8:	c2 98       	cbi	0x18, 2	; 24
 2fa:	08 95       	ret
	} else if (EE_SWITCH_ENABLED && CPE_SWITCH_DISABLED) {
 2fc:	86 9b       	sbis	0x10, 6	; 16
 2fe:	06 c0       	rjmp	.+12     	; 0x30c <Determine_Operation_Mode+0x30>
 300:	87 99       	sbic	0x10, 7	; 16
 302:	04 c0       	rjmp	.+8      	; 0x30c <Determine_Operation_Mode+0x30>
		OPERATION_MODE = EE_PID;
 304:	82 e0       	ldi	r24, 0x02	; 2
 306:	80 93 60 00 	sts	0x0060, r24
		EE_BOARD_ENABLE_RELAY;
 30a:	c2 9a       	sbi	0x18, 2	; 24
 30c:	08 95       	ret

0000030e <main>:
	}
}

int main(void) {
	Peripherals_Init();
 30e:	dc df       	rcall	.-72     	; 0x2c8 <Peripherals_Init>
	ISR_Init();
 310:	d6 df       	rcall	.-84     	; 0x2be <ISR_Init>
	PutS("\nTEST\n");
 312:	8a ea       	ldi	r24, 0xAA	; 170
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	12 df       	rcall	.-476    	; 0x13c <PutS>
			case EE_PID:
				TWI_MEMORY_LOCATION = 0;
				if (ALLOW_TWI_WRITE) {
					// 64 kbits of AT24C64 two wire serial EEPROM
					if (TWI_MEMORY_LOCATION < 8000) {										// write to EEPROM chip 1
						EEPROM_write(TWI_MEMORY_LOCATION++, ADC_VALUE_0, WRITE_EEPROM1);
 318:	c1 e0       	ldi	r28, 0x01	; 1
 31a:	d0 e0       	ldi	r29, 0x00	; 0
	PutS("\nTEST\n");
	// cli(); clears global interrupts
	

	while (1) {
		Determine_Operation_Mode();
 31c:	df df       	rcall	.-66     	; 0x2dc <Determine_Operation_Mode>
		switch (OPERATION_MODE) {
 31e:	80 91 60 00 	lds	r24, 0x0060
 322:	82 30       	cpi	r24, 0x02	; 2
 324:	19 f0       	breq	.+6      	; 0x32c <main+0x1e>
 326:	83 30       	cpi	r24, 0x03	; 3
 328:	51 f1       	breq	.+84     	; 0x37e <main+0x70>
 32a:	36 c0       	rjmp	.+108    	; 0x398 <main+0x8a>
				//Transmit_EEPROM(4, 800, WRITE_EEPROM1, READ_EEPROM1, 0); // not starting at 0
				//Transmit_EEPROM(4, 400, WRITE_EEPROM2, READ_EEPROM2, 1); // not starting at 0
				//PutS("IDLE");
				break;
			case EE_PID:
				TWI_MEMORY_LOCATION = 0;
 32c:	10 92 b7 00 	sts	0x00B7, r1
 330:	10 92 b6 00 	sts	0x00B6, r1
				if (ALLOW_TWI_WRITE) {
 334:	80 91 b4 00 	lds	r24, 0x00B4
 338:	90 91 b5 00 	lds	r25, 0x00B5
 33c:	89 2b       	or	r24, r25
 33e:	61 f1       	breq	.+88     	; 0x398 <main+0x8a>
					// 64 kbits of AT24C64 two wire serial EEPROM
					if (TWI_MEMORY_LOCATION < 8000) {										// write to EEPROM chip 1
						EEPROM_write(TWI_MEMORY_LOCATION++, ADC_VALUE_0, WRITE_EEPROM1);
 340:	60 91 63 00 	lds	r22, 0x0063
 344:	70 e0       	ldi	r23, 0x00	; 0
 346:	d0 93 b7 00 	sts	0x00B7, r29
 34a:	c0 93 b6 00 	sts	0x00B6, r28
 34e:	42 ea       	ldi	r20, 0xA2	; 162
 350:	50 e0       	ldi	r21, 0x00	; 0
 352:	80 e0       	ldi	r24, 0x00	; 0
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	8a de       	rcall	.-748    	; 0x6c <EEPROM_write>
						EEPROM_write(TWI_MEMORY_LOCATION++, ADC_VALUE_1, WRITE_EEPROM1);
 358:	60 91 62 00 	lds	r22, 0x0062
 35c:	70 e0       	ldi	r23, 0x00	; 0
 35e:	80 91 b6 00 	lds	r24, 0x00B6
 362:	90 91 b7 00 	lds	r25, 0x00B7
 366:	9c 01       	movw	r18, r24
 368:	2f 5f       	subi	r18, 0xFF	; 255
 36a:	3f 4f       	sbci	r19, 0xFF	; 255
 36c:	30 93 b7 00 	sts	0x00B7, r19
 370:	20 93 b6 00 	sts	0x00B6, r18
 374:	42 ea       	ldi	r20, 0xA2	; 162
 376:	50 e0       	ldi	r21, 0x00	; 0
 378:	79 de       	rcall	.-782    	; 0x6c <EEPROM_write>
					} else {
						TWI_MEMORY_LOCATION = 0;
					}
					ADCSRA |= (1 << ADSC); // start next conversion
 37a:	36 9a       	sbi	0x06, 6	; 6
 37c:	0d c0       	rjmp	.+26     	; 0x398 <main+0x8a>
				//PutS("EE");
				break;
			case CPE_PID:
				TWI_MEMORY_LOCATION = 0;	
				if (TWI_MEMORY_LOCATION < 8000) {											// write to EEPROM chip 2
					EEPROM_write(TWI_MEMORY_LOCATION++, ADC_VALUE_2, WRITE_EEPROM2);
 37e:	60 91 61 00 	lds	r22, 0x0061
 382:	70 e0       	ldi	r23, 0x00	; 0
 384:	d0 93 b7 00 	sts	0x00B7, r29
 388:	c0 93 b6 00 	sts	0x00B6, r28
 38c:	44 ea       	ldi	r20, 0xA4	; 164
 38e:	50 e0       	ldi	r21, 0x00	; 0
 390:	80 e0       	ldi	r24, 0x00	; 0
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	6b de       	rcall	.-810    	; 0x6c <EEPROM_write>
				} else {
					TWI_MEMORY_LOCATION = 0;
				}
				ADCSRA |= (1 << ADSC); // start next conversion
 396:	36 9a       	sbi	0x06, 6	; 6
				//PutS("CPE");
				break;
			default:
				break;
		}
		ADCSRA |= (1 << ADSC);
 398:	36 9a       	sbi	0x06, 6	; 6
		PutC('\n');
 39a:	8a e0       	ldi	r24, 0x0A	; 10
 39c:	cb de       	rcall	.-618    	; 0x134 <PutC>
		HEX_USART(ReadADC());
 39e:	64 de       	rcall	.-824    	; 0x68 <ReadADC>
 3a0:	e2 de       	rcall	.-572    	; 0x166 <HEX_USART>
	}
 3a2:	bc cf       	rjmp	.-136    	; 0x31c <main+0xe>

000003a4 <_exit>:
 3a4:	f8 94       	cli

000003a6 <__stop_program>:
 3a6:	ff cf       	rjmp	.-2      	; 0x3a6 <__stop_program>
